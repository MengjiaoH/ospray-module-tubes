// ======================================================================== //
// Copyright 2009-2016 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

// ospray
#include "ospray/math/AffineSpace.ih"
#include "ospray/geometry/Geometry.ih"

//typedef enum { CYLINDER, CONE, SPHERE } CompType;
#define COMP_TYPE_SPHERE   0
#define COMP_TYPE_CYLINDER 1
#define COMP_TYPE_CONE     2

/*! precomputed acceleration data for one component of a neuron - can
    be either a cylinder (for a link between two equal-radius nodes),
    a cone stump (link between two nodes of different radius), or a
    sphere (node) */
struct NeuronComp {
  affine3f unitXfm;
  linear3f backXfm;
  float    z0, z1;
  uint32   type;
  uint32   node0, node1;
};

/*! input: a node in the neuron's node graph, consisting of positioin and thickness */
struct NeuronNode {
  vec3f pos;
  float rad;
};

/*! in put data: a link that connects two nodes */
struct NeuronLink {
  int first, second;
};

struct NeuronGeometry {
  Geometry    super; //!< inherited from superclass
  RTCScene    compModel; //!< embree scene for the neuron's components
  uint32      compGeomID; //!< embree geometry ID inside the embreeScene

  box3f       bounds;

  /*! @{ array of pre-componuted compnent accels */
  uint32      numComps;
  NeuronComp *comp;
  /*! @} */
  
  /*! @{ array of nodes */
  uint32      numNodes;
  NeuronNode *node;
  /*! @} */
  
  /*! @{ array of links */
  uint32 numLinks;
  NeuronLink *link;
  /*! @} */

  //color list
  uniform vec4f *colorArray;
};
